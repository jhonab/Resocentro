using Microsoft.Win32;
using Resocentro_Desktop.DAO;
using Resocentro_Desktop.Entitys;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Shapes;
using Telerik.Windows.Controls;
using Telerik.Windows.Controls.Charting;
using Telerik.Windows.Data;

namespace Resocentro_Desktop.Interfaz.frmCarta
{
    /// <summary>
    /// Lógica de interacción para frmVisorCarta.xaml
    /// </summary>
    public partial class frmVisorCarta : Window
    {
        MySession session;
        public frmVisorCarta()
        {
            InitializeComponent();
            
        }
        public void cargarGUI(MySession session)
        {
            dtp_fecha_tramite.SelectedDate = DateTime.Now;
            dtp_fecha_update.SelectedDate = DateTime.Now;
            dtp_fecha_cita.SelectedDate = DateTime.Now;
            dtp_fecha_inicio.SelectedDate = DateTime.Now;
            dtp_fecha_fin.SelectedDate = DateTime.Now;
            this.session = session;



        }

        private void btnbuscar_tramite_Click(object sender, RoutedEventArgs e)
        {
            if (dtp_fecha_tramite.SelectedValue != null)
            {
                var fecha = dtp_fecha_tramite.SelectedDate.Value;
                var list = (new CartaDAO()).getvisoCartas(1, 1, fecha.Day, fecha.Month, fecha.Year, "", "", "");
                mostrarData(list, false);
                MessageBox.Show("Datos Cargados", "Información", MessageBoxButton.OK, MessageBoxImage.Information);
            }
            else
                MessageBox.Show("Seleccione una Fecha", "Información", MessageBoxButton.OK, MessageBoxImage.Information);
        }
        private void btnbuscar_update_Click(object sender, RoutedEventArgs e)
        {
            if (dtp_fecha_update.SelectedValue != null)
            {
                var fecha = dtp_fecha_update.SelectedDate.Value;
                var list = (new CartaDAO()).getvisoCartas(4, 1, fecha.Day, fecha.Month, fecha.Year, "", "", "");
                mostrarData(list, false);
                MessageBox.Show("Datos Cargados", "Información", MessageBoxButton.OK, MessageBoxImage.Information);
            }
            else
                MessageBox.Show("Seleccione una Fecha", "Información", MessageBoxButton.OK, MessageBoxImage.Information);
        }

        private void btnbuscar_cita_Click(object sender, RoutedEventArgs e)
        {
            if (dtp_fecha_cita.SelectedValue != null)
            {
                var fecha = dtp_fecha_cita.SelectedDate.Value;
                var list = (new CartaDAO()).getvisoCartas(5, 1, fecha.Day, fecha.Month, fecha.Year, "", "", "");
                mostrarData(list, false);
                MessageBox.Show("Datos Cargados", "Información", MessageBoxButton.OK, MessageBoxImage.Information);
            }
            else
                MessageBox.Show("Seleccione una Fecha", "Información", MessageBoxButton.OK, MessageBoxImage.Information);
        }
        private void mostrarData(List<VisorCarta> list, bool deleteAll)
        {
            grid_cartas.ItemsSource = list;
            List<object> resumen = new List<object>{
                        new{Estado="Tramitdad",Cant=list.Where(x=>x.Estado=="TRAMITADA").Count()},
                        new{Estado="Aprobada",Cant=list.Where(x=>x.Estado=="APROBADA").Count()},
                        new{Estado="Citada",Cant=list.Where(x=>x.Estado=="CITADA").Count()},
                        new{Estado="Rechazada",Cant=list.Where(x=>x.Estado=="RECHAZADA").Count()},
                        new{Estado="Observada",Cant=list.Where(x=>x.Estado=="OBSERVADA").Count()},
                        new{Estado="Averiada",Cant=list.Where(x=>x.Estado=="AVERIADA").Count()},
                        new{Estado="Sin Tramitar",Cant=list.Where(x=>x.Estado=="SIN TRAMITAR").Count()},
                        new{Estado="Total",Cant=list.Count()},
            };
            grid_resumen.ItemsSource = resumen;

            if (deleteAll)
            {
                radChart.DefaultView.ChartArea.DataSeries.Clear();
                radChart2.DefaultView.ChartArea.DataSeries.Clear();
            }
            radChart.DefaultView.ChartLegend.UseAutoGeneratedItems = true;

            radChart2.DefaultView.ChartLegend.UseAutoGeneratedItems = true;
            var cant = radChart2.DefaultView.ChartArea.DataSeries.Count() + 1;
            DataSeries series = new DataSeries();
            series.Definition = new BarSeriesDefinition();
            series.LegendLabel = "Usu. Tra. " + cant;
            foreach (var item in list.GroupBy(x => x.Usuario).ToList())
            {
                series.Add(new DataPoint(item.Key.Split(' ')[0], item.Count()));

            }
            radChart.DefaultView.ChartArea.DataSeries.Add(series);

            DataSeries series1 = new DataSeries();
            series1.Definition = new BarSeriesDefinition();
            series1.LegendLabel = "Usu. Act. " + cant;
            foreach (var item in list.Where(x => x.user_update != null && x.user_update != "").GroupBy(x => x.user_update).ToList())
            {
                series1.Add(new DataPoint(item.Key.Split(' ')[0], item.Count()));
            }
            radChart.DefaultView.ChartArea.DataSeries.Add(series1);

            DataSeries series2 = new DataSeries();
            series2.Definition = new BarSeriesDefinition();
            series2.LegendLabel = "Usu. Cit. " + cant;
            foreach (var item in list.Where(x => x.user_cita != null && x.user_cita != "").GroupBy(x => x.user_cita).ToList())
            {
                series2.Add(new DataPoint(item.Key.Split(' ')[0], item.Count()));
            }
            radChart.DefaultView.ChartArea.DataSeries.Add(series2);

            DataSeries series3 = new DataSeries();
            series3.Definition = new BarSeriesDefinition();
            series3.LegendLabel = "Aseguradora " + (radChart2.DefaultView.ChartArea.DataSeries.Count() + 1);
            foreach (var item in (list.GroupBy(x => x.Aseguradora).Select(x => new { aseguradora = x.Key, cant = x.Count() }).ToList()).OrderByDescending(x => x.cant).Take(5))
            {
                series3.Add(new DataPoint(item.aseguradora, item.cant));

            }
            radChart2.DefaultView.ChartArea.DataSeries.Add(series3);


        }

        private void btnbuscar_rango_Click(object sender, RoutedEventArgs e)
        {
            DateTime ini = dtp_fecha_inicio.SelectedDate.Value;
            DateTime fin = dtp_fecha_fin.SelectedDate.Value;

            if (fin >= ini)
            {
                var list = (new CartaDAO()).getvisoCartas(2, 1, 0, 0, 0, ini.ToString("dd/MM/yyyy") + " 00:01", "", fin.ToString("dd/MM/yyyy") + " 23:59");
                mostrarData(list, false);
                MessageBox.Show("Datos Cargados", "Información", MessageBoxButton.OK, MessageBoxImage.Information);
            }
            else
                MessageBox.Show("La Fecha de Inicio no puede mayor a la fecha de Fin", "Error", MessageBoxButton.OK, MessageBoxImage.Error);

        }

        private void btnbuscar_paciente_Click(object sender, RoutedEventArgs e)
        {
            if (txtpaciente.Text != "")
            {
                var list = (new CartaDAO()).getvisoCartas(3, 2, 0, 0, 0, "", txtpaciente.Text + "%", "");
                mostrarData(list, true);
                MessageBox.Show("Datos Cargados", "Información", MessageBoxButton.OK, MessageBoxImage.Information);
            }
            else
                MessageBox.Show("Ingrese un apellido", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
        }

        private void grid_cartas_RowActivated(object sender, Telerik.Windows.Controls.GridView.RowEventArgs e)
        {
            VisorCarta item = (VisorCarta)e.Row.DataContext;
            var carta = new CartaDAO().getCartaxCodigo(item.Codigo, item.ID);
            var detalle = new CartaDAO().getDetalleCartaxCodigo(item.Codigo, item.ID);
            if (carta != null)
            {
                frmCarta gui = new frmCarta();
                gui.cargarGUI(session, false);
                gui.Show();
                new CartaDAO().insertLog(carta.codigocartagarantia.ToString(), this.session.shortuser, (int)Tipo_Log.Lectura, "Se abrió la proforma N° " + carta.codigocartagarantia.ToString());
                gui.setCartaGarantia(carta, detalle, false);
            }
        }

        private void Button_Click(object sender, RoutedEventArgs e)
        {
            radChart.DefaultView.ChartArea.DataSeries.Clear();
        } 
        private void Button_Click_1(object sender, RoutedEventArgs e)
        {
            radChart2.DefaultView.ChartArea.DataSeries.Clear();
        }

        private void grid_cartas_AutoGeneratingColumn(object sender, Telerik.Windows.Controls.GridViewAutoGeneratingColumnEventArgs e)
        {
            if (e.Column.UniqueName == "ID")
            {
                var count = new CountFunction();
                count.Caption = "Total: ";
                e.Column.AggregateFunctions.Add(count);
            }
        }

        private void MenuItemExportar_Click(object sender, Telerik.Windows.RadRoutedEventArgs e)
        {
            new Tool().exportGrid(grid_cartas,true,false,false);
        }

       


    }
}

