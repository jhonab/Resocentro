//------------------------------------------------------------------------------
// <auto-generated>
//     Este código se generó a partir de una plantilla.
//
//     Los cambios manuales en este archivo pueden causar un comportamiento inesperado de la aplicación.
//     Los cambios manuales en este archivo se sobrescribirán si se regenera el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SistemaResocentro.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class DATABASEGENERALEntities : DbContext
    {
        public DATABASEGENERALEntities()
            : base("name=DATABASEGENERALEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<CARGO> CARGO { get; set; }
        public virtual DbSet<Permiso> Permiso { get; set; }
        public virtual DbSet<SUCURSAL> SUCURSAL { get; set; }
        public virtual DbSet<SUCURSALXUSUARIO> SUCURSALXUSUARIO { get; set; }
        public virtual DbSet<UNIDADNEGOCIO> UNIDADNEGOCIO { get; set; }
        public virtual DbSet<PROFORMA> PROFORMA { get; set; }
        public virtual DbSet<COMPANIASEGURO> COMPANIASEGURO { get; set; }
        public virtual DbSet<PACIENTE> PACIENTE { get; set; }
        public virtual DbSet<ESTUDIO> ESTUDIO { get; set; }
        public virtual DbSet<EXAMENXATENCION> EXAMENXATENCION { get; set; }
        public virtual DbSet<DETALLEPROFORMA> DETALLEPROFORMA { get; set; }
        public virtual DbSet<RESULTADODELIVERY> RESULTADODELIVERY { get; set; }
        public virtual DbSet<DOCESCANEADO> DOCESCANEADO { get; set; }
        public virtual DbSet<CLASE> CLASE { get; set; }
        public virtual DbSet<EQUIPO_ESTUDIO> EQUIPO_ESTUDIO { get; set; }
        public virtual DbSet<ESTUDIO_COMPANIA> ESTUDIO_COMPANIA { get; set; }
        public virtual DbSet<MODALIDAD> MODALIDAD { get; set; }
        public virtual DbSet<CIE> CIE { get; set; }
        public virtual DbSet<SitedProducto> SitedProducto { get; set; }
        public virtual DbSet<Sunasa_Cobertura> Sunasa_Cobertura { get; set; }
        public virtual DbSet<Tipo_Permiso> Tipo_Permiso { get; set; }
        public virtual DbSet<CorrelativoMotivo> CorrelativoMotivo { get; set; }
        public virtual DbSet<HistorialCorrelativo> HistorialCorrelativo { get; set; }
        public virtual DbSet<MotivoCodigo> MotivoCodigo { get; set; }
        public virtual DbSet<TKT_Historial> TKT_Historial { get; set; }
        public virtual DbSet<TKT_List_Atencion> TKT_List_Atencion { get; set; }
        public virtual DbSet<TKT_Ticketera> TKT_Ticketera { get; set; }
        public virtual DbSet<TKT_Tipo_Atencion> TKT_Tipo_Atencion { get; set; }
        public virtual DbSet<TKT_Counter> TKT_Counter { get; set; }
        public virtual DbSet<ATENCION> ATENCION { get; set; }
        public virtual DbSet<INTEGRACION> INTEGRACION { get; set; }
        public virtual DbSet<Encuesta> Encuesta { get; set; }
        public virtual DbSet<Encuesta_Satisfaccion> Encuesta_Satisfaccion { get; set; }
        public virtual DbSet<SupervisarEncuesta> SupervisarEncuesta { get; set; }
        public virtual DbSet<Institucion_Medico> Institucion_Medico { get; set; }
        public virtual DbSet<Institucion_Promotor> Institucion_Promotor { get; set; }
        public virtual DbSet<ESPECIALIDAD> ESPECIALIDAD { get; set; }
        public virtual DbSet<Incidente> Incidente { get; set; }
        public virtual DbSet<Planificacion_Documento> Planificacion_Documento { get; set; }
        public virtual DbSet<ReporteComisionesMedico> ReporteComisionesMedico { get; set; }
        public virtual DbSet<ESCANADMISION> ESCANADMISION { get; set; }
        public virtual DbSet<Ubicacion> Ubicacion { get; set; }
        public virtual DbSet<USUARIO> USUARIO { get; set; }
        public virtual DbSet<AUDITORIA_CARTAS_GARANTIA> AUDITORIA_CARTAS_GARANTIA { get; set; }
        public virtual DbSet<CITA> CITA { get; set; }
        public virtual DbSet<HORARIO> HORARIO { get; set; }
        public virtual DbSet<Log_Seguimiento_Produccion> Log_Seguimiento_Produccion { get; set; }
        public virtual DbSet<EQUIPO> EQUIPO { get; set; }
        public virtual DbSet<Motivo_Entre_Turno> Motivo_Entre_Turno { get; set; }
        public virtual DbSet<Solicitud_Entre_Turno> Solicitud_Entre_Turno { get; set; }
        public virtual DbSet<TipoMedico> TipoMedico { get; set; }
        public virtual DbSet<ESTUDIO_CARTAGAR> ESTUDIO_CARTAGAR { get; set; }
        public virtual DbSet<Colaborador> Colaborador { get; set; }
        public virtual DbSet<MEDICOEXTERNO> MEDICOEXTERNO { get; set; }
        public virtual DbSet<CLINICAHOSPITAL> CLINICAHOSPITAL { get; set; }
        public virtual DbSet<CARTAGARANTIA> CARTAGARANTIA { get; set; }
        public virtual DbSet<Planificacion> Planificacion { get; set; }
        public virtual DbSet<Planificacion_CompaniaSeguro_Documento> Planificacion_CompaniaSeguro_Documento { get; set; }
        public virtual DbSet<Planificacion_CompaniaSeguro> Planificacion_CompaniaSeguro { get; set; }
        public virtual DbSet<CompaniaSeguro_Colaborador> CompaniaSeguro_Colaborador { get; set; }
        public virtual DbSet<CompaniaSeguro_Promotor> CompaniaSeguro_Promotor { get; set; }
        public virtual DbSet<Com_Medico> Com_Medico { get; set; }
        public virtual DbSet<Insti_Prom_Medico> Insti_Prom_Medico { get; set; }
        public virtual DbSet<AsignacionRepresentanteMedico> AsignacionRepresentanteMedico { get; set; }
        public virtual DbSet<UBIGEO> UBIGEO { get; set; }
        public virtual DbSet<ASEGURADORA> ASEGURADORA { get; set; }
        public virtual DbSet<DetalleReporteComisionesMedico> DetalleReporteComisionesMedico { get; set; }
        public virtual DbSet<EMPLEADO> EMPLEADO { get; set; }
        public virtual DbSet<Serie_Equipo> Serie_Equipo { get; set; }
        public virtual DbSet<SERIE> SERIE { get; set; }
        public virtual DbSet<ConfirmacionLecturaPago> ConfirmacionLecturaPago { get; set; }
        public virtual DbSet<EmpresaServicio> EmpresaServicio { get; set; }
        public virtual DbSet<TelefonoEmpresa> TelefonoEmpresa { get; set; }
        public virtual DbSet<TipoIncidente> TipoIncidente { get; set; }
        public virtual DbSet<TipoTelefono> TipoTelefono { get; set; }
        public virtual DbSet<EXAMENXCITA> EXAMENXCITA { get; set; }
        public virtual DbSet<RevisionIncidente> RevisionIncidente { get; set; }
        public virtual DbSet<IncidenteEquipo> IncidenteEquipo { get; set; }
        public virtual DbSet<AdjuntoIncidente> AdjuntoIncidente { get; set; }
        public virtual DbSet<PiezasRevision> PiezasRevision { get; set; }
        public virtual DbSet<FrecuenciaMantenimiento> FrecuenciaMantenimiento { get; set; }
        public virtual DbSet<ConversacionIncidente> ConversacionIncidente { get; set; }
    
        public virtual ObjectResult<visordecartas_Result> visordecartas(Nullable<int> condicion, Nullable<int> coduni, Nullable<int> fdia, Nullable<int> fmes, Nullable<int> fanio, string fecha1, string apellidos, string fecha2)
        {
            var condicionParameter = condicion.HasValue ?
                new ObjectParameter("condicion", condicion) :
                new ObjectParameter("condicion", typeof(int));
    
            var coduniParameter = coduni.HasValue ?
                new ObjectParameter("coduni", coduni) :
                new ObjectParameter("coduni", typeof(int));
    
            var fdiaParameter = fdia.HasValue ?
                new ObjectParameter("fdia", fdia) :
                new ObjectParameter("fdia", typeof(int));
    
            var fmesParameter = fmes.HasValue ?
                new ObjectParameter("fmes", fmes) :
                new ObjectParameter("fmes", typeof(int));
    
            var fanioParameter = fanio.HasValue ?
                new ObjectParameter("fanio", fanio) :
                new ObjectParameter("fanio", typeof(int));
    
            var fecha1Parameter = fecha1 != null ?
                new ObjectParameter("fecha1", fecha1) :
                new ObjectParameter("fecha1", typeof(string));
    
            var apellidosParameter = apellidos != null ?
                new ObjectParameter("apellidos", apellidos) :
                new ObjectParameter("apellidos", typeof(string));
    
            var fecha2Parameter = fecha2 != null ?
                new ObjectParameter("fecha2", fecha2) :
                new ObjectParameter("fecha2", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<visordecartas_Result>("visordecartas", condicionParameter, coduniParameter, fdiaParameter, fmesParameter, fanioParameter, fecha1Parameter, apellidosParameter, fecha2Parameter);
        }
    
        public virtual ObjectResult<spu_ReportePromedioxFecha_Ticketera_Result> spu_ReportePromedioxFecha_Ticketera(string inicio, string fin, Nullable<int> empresa, Nullable<int> sede)
        {
            var inicioParameter = inicio != null ?
                new ObjectParameter("inicio", inicio) :
                new ObjectParameter("inicio", typeof(string));
    
            var finParameter = fin != null ?
                new ObjectParameter("fin", fin) :
                new ObjectParameter("fin", typeof(string));
    
            var empresaParameter = empresa.HasValue ?
                new ObjectParameter("empresa", empresa) :
                new ObjectParameter("empresa", typeof(int));
    
            var sedeParameter = sede.HasValue ?
                new ObjectParameter("sede", sede) :
                new ObjectParameter("sede", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spu_ReportePromedioxFecha_Ticketera_Result>("spu_ReportePromedioxFecha_Ticketera", inicioParameter, finParameter, empresaParameter, sedeParameter);
        }
    
        public virtual ObjectResult<spu_ReportexFecha_Ticketera_Result> spu_ReportexFecha_Ticketera(string inicio, string fin, Nullable<int> empresa, Nullable<int> sede)
        {
            var inicioParameter = inicio != null ?
                new ObjectParameter("inicio", inicio) :
                new ObjectParameter("inicio", typeof(string));
    
            var finParameter = fin != null ?
                new ObjectParameter("fin", fin) :
                new ObjectParameter("fin", typeof(string));
    
            var empresaParameter = empresa.HasValue ?
                new ObjectParameter("empresa", empresa) :
                new ObjectParameter("empresa", typeof(int));
    
            var sedeParameter = sede.HasValue ?
                new ObjectParameter("sede", sede) :
                new ObjectParameter("sede", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spu_ReportexFecha_Ticketera_Result>("spu_ReportexFecha_Ticketera", inicioParameter, finParameter, empresaParameter, sedeParameter);
        }
    
        public virtual int integrador(Nullable<int> numeroexamen, string equipo)
        {
            var numeroexamenParameter = numeroexamen.HasValue ?
                new ObjectParameter("numeroexamen", numeroexamen) :
                new ObjectParameter("numeroexamen", typeof(int));
    
            var equipoParameter = equipo != null ?
                new ObjectParameter("equipo", equipo) :
                new ObjectParameter("equipo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("integrador", numeroexamenParameter, equipoParameter);
        }
    
        public virtual ObjectResult<listarturnoparacita_Result> listarturnoparacita(Nullable<int> coduni, Nullable<int> codsucu, Nullable<int> codmodalidad, Nullable<int> dia, Nullable<int> mes, Nullable<int> anio)
        {
            var coduniParameter = coduni.HasValue ?
                new ObjectParameter("coduni", coduni) :
                new ObjectParameter("coduni", typeof(int));
    
            var codsucuParameter = codsucu.HasValue ?
                new ObjectParameter("codsucu", codsucu) :
                new ObjectParameter("codsucu", typeof(int));
    
            var codmodalidadParameter = codmodalidad.HasValue ?
                new ObjectParameter("codmodalidad", codmodalidad) :
                new ObjectParameter("codmodalidad", typeof(int));
    
            var diaParameter = dia.HasValue ?
                new ObjectParameter("dia", dia) :
                new ObjectParameter("dia", typeof(int));
    
            var mesParameter = mes.HasValue ?
                new ObjectParameter("mes", mes) :
                new ObjectParameter("mes", typeof(int));
    
            var anioParameter = anio.HasValue ?
                new ObjectParameter("anio", anio) :
                new ObjectParameter("anio", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<listarturnoparacita_Result>("listarturnoparacita", coduniParameter, codsucuParameter, codmodalidadParameter, diaParameter, mesParameter, anioParameter);
        }
    }
}
